// Generated by `wit-bindgen` 0.21.0. DO NOT EDIT!
// Options used:
pub mod wasm_robotics {
    pub mod robotics {
        #[allow(clippy::all)]
        pub mod types {
            #[used]
            #[doc(hidden)]
            #[cfg(target_arch = "wasm32")]
            static __FORCE_SECTION_REF: fn() =
                super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            #[derive(Clone)]
            pub enum AccessError {
                NamedResourceNotFound(_rt::String),
                HardwareAccessError(_rt::String),
            }
            impl ::core::fmt::Debug for AccessError {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    match self {
                        AccessError::NamedResourceNotFound(e) => f
                            .debug_tuple("AccessError::NamedResourceNotFound")
                            .field(e)
                            .finish(),
                        AccessError::HardwareAccessError(e) => f
                            .debug_tuple("AccessError::HardwareAccessError")
                            .field(e)
                            .finish(),
                    }
                }
            }
            impl ::core::fmt::Display for AccessError {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    write!(f, "{:?}", self)
                }
            }

            impl std::error::Error for AccessError {}
            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct Quaternion {
                pub x: f32,
                pub y: f32,
                pub z: f32,
                pub w: f32,
            }
            impl ::core::fmt::Debug for Quaternion {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("Quaternion")
                        .field("x", &self.x)
                        .field("y", &self.y)
                        .field("z", &self.z)
                        .field("w", &self.w)
                        .finish()
                }
            }
        }

        #[allow(clippy::all)]
        pub mod imus {
            #[used]
            #[doc(hidden)]
            #[cfg(target_arch = "wasm32")]
            static __FORCE_SECTION_REF: fn() =
                super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            pub type AccessError = super::super::super::wasm_robotics::robotics::types::AccessError;
            pub type Quaternion = super::super::super::wasm_robotics::robotics::types::Quaternion;
            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct CalibrationData {
                pub acc_offset_x_lsb: u8,
                pub acc_offset_x_msb: u8,
                pub acc_offset_y_lsb: u8,
                pub acc_offset_y_msb: u8,
                pub acc_offset_z_lsb: u8,
                pub acc_offset_z_msb: u8,
                pub mag_offset_x_lsb: u8,
                pub mag_offset_x_msb: u8,
                pub mag_offset_y_lsb: u8,
                pub mag_offset_y_msb: u8,
                pub mag_offset_z_lsb: u8,
                pub mag_offset_z_msb: u8,
                pub gyr_offset_x_lsb: u8,
                pub gyr_offset_x_msb: u8,
                pub gyr_offset_y_lsb: u8,
                pub gyr_offset_y_msb: u8,
                pub gyr_offset_z_lsb: u8,
                pub gyr_offset_z_msb: u8,
                pub acc_radius_lsb: u8,
                pub acc_radius_msb: u8,
                pub mag_radius_lsb: u8,
                pub mag_radius_msb: u8,
            }
            impl ::core::fmt::Debug for CalibrationData {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("CalibrationData")
                        .field("acc-offset-x-lsb", &self.acc_offset_x_lsb)
                        .field("acc-offset-x-msb", &self.acc_offset_x_msb)
                        .field("acc-offset-y-lsb", &self.acc_offset_y_lsb)
                        .field("acc-offset-y-msb", &self.acc_offset_y_msb)
                        .field("acc-offset-z-lsb", &self.acc_offset_z_lsb)
                        .field("acc-offset-z-msb", &self.acc_offset_z_msb)
                        .field("mag-offset-x-lsb", &self.mag_offset_x_lsb)
                        .field("mag-offset-x-msb", &self.mag_offset_x_msb)
                        .field("mag-offset-y-lsb", &self.mag_offset_y_lsb)
                        .field("mag-offset-y-msb", &self.mag_offset_y_msb)
                        .field("mag-offset-z-lsb", &self.mag_offset_z_lsb)
                        .field("mag-offset-z-msb", &self.mag_offset_z_msb)
                        .field("gyr-offset-x-lsb", &self.gyr_offset_x_lsb)
                        .field("gyr-offset-x-msb", &self.gyr_offset_x_msb)
                        .field("gyr-offset-y-lsb", &self.gyr_offset_y_lsb)
                        .field("gyr-offset-y-msb", &self.gyr_offset_y_msb)
                        .field("gyr-offset-z-lsb", &self.gyr_offset_z_lsb)
                        .field("gyr-offset-z-msb", &self.gyr_offset_z_msb)
                        .field("acc-radius-lsb", &self.acc_radius_lsb)
                        .field("acc-radius-msb", &self.acc_radius_msb)
                        .field("mag-radius-lsb", &self.mag_radius_lsb)
                        .field("mag-radius-msb", &self.mag_radius_msb)
                        .finish()
                }
            }
            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct AxisSigns {
                pub x_negative: bool,
                pub y_negative: bool,
                pub z_negative: bool,
            }
            impl ::core::fmt::Debug for AxisSigns {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("AxisSigns")
                        .field("x-negative", &self.x_negative)
                        .field("y-negative", &self.y_negative)
                        .field("z-negative", &self.z_negative)
                        .finish()
                }
            }
            #[repr(u8)]
            #[derive(Clone, Copy, Eq, PartialEq)]
            pub enum AxisConfig {
                AxisX,
                AxisY,
                AxisZ,
            }
            impl ::core::fmt::Debug for AxisConfig {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    match self {
                        AxisConfig::AxisX => f.debug_tuple("AxisConfig::AxisX").finish(),
                        AxisConfig::AxisY => f.debug_tuple("AxisConfig::AxisY").finish(),
                        AxisConfig::AxisZ => f.debug_tuple("AxisConfig::AxisZ").finish(),
                    }
                }
            }

            impl AxisConfig {
                pub(crate) unsafe fn _lift(val: u8) -> AxisConfig {
                    if !cfg!(debug_assertions) {
                        return ::core::mem::transmute(val);
                    }

                    match val {
                        0 => AxisConfig::AxisX,
                        1 => AxisConfig::AxisY,
                        2 => AxisConfig::AxisZ,

                        _ => panic!("invalid enum discriminant"),
                    }
                }
            }

            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct AxisRemap {
                pub x: AxisConfig,
                pub y: AxisConfig,
                pub z: AxisConfig,
            }
            impl ::core::fmt::Debug for AxisRemap {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("AxisRemap")
                        .field("x", &self.x)
                        .field("y", &self.y)
                        .field("z", &self.z)
                        .finish()
                }
            }
            #[repr(u8)]
            #[derive(Clone, Copy, Eq, PartialEq)]
            pub enum PowerMode {
                Normal,
                LowPower,
                Suspend,
            }
            impl ::core::fmt::Debug for PowerMode {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    match self {
                        PowerMode::Normal => f.debug_tuple("PowerMode::Normal").finish(),
                        PowerMode::LowPower => f.debug_tuple("PowerMode::LowPower").finish(),
                        PowerMode::Suspend => f.debug_tuple("PowerMode::Suspend").finish(),
                    }
                }
            }

            impl PowerMode {
                pub(crate) unsafe fn _lift(val: u8) -> PowerMode {
                    if !cfg!(debug_assertions) {
                        return ::core::mem::transmute(val);
                    }

                    match val {
                        0 => PowerMode::Normal,
                        1 => PowerMode::LowPower,
                        2 => PowerMode::Suspend,

                        _ => panic!("invalid enum discriminant"),
                    }
                }
            }

            /// name into HW map including alternate address for IMU TODO
            /// Subset of underlying BNO055 interface focusing on that which we need first
            /// Still need axis remapping and axis sign mapping

            #[derive(Debug)]
            #[repr(transparent)]
            pub struct Imu {
                handle: _rt::Resource<Imu>,
            }

            impl Imu {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: _rt::Resource::from_handle(handle),
                    }
                }

                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }

                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }

            unsafe impl _rt::WasmResource for Imu {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();

                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "wasm-robotics:robotics/imus@0.1.0")]
                        extern "C" {
                            #[link_name = "[resource-drop]imu"]
                            fn drop(_: u32);
                        }

                        drop(_handle);
                    }
                }
            }

            #[allow(unused_unsafe, clippy::all)]
            pub fn imu_named(name: &str) -> Result<Imu, AccessError> {
                unsafe {
                    #[repr(align(4))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 16]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 16]);
                    let vec0 = name;
                    let ptr0 = vec0.as_ptr().cast::<u8>();
                    let len0 = vec0.len();
                    let ptr1 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "wasm-robotics:robotics/imus@0.1.0")]
                    extern "C" {
                        #[link_name = "imu-named"]
                        fn wit_import(_: *mut u8, _: usize, _: *mut u8);
                    }

                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: *mut u8, _: usize, _: *mut u8) {
                        unreachable!()
                    }
                    wit_import(ptr0.cast_mut(), len0, ptr1);
                    let l2 = i32::from(*ptr1.add(0).cast::<u8>());
                    match l2 {
                        0 => {
                            let e = {
                                let l3 = *ptr1.add(4).cast::<i32>();

                                Imu::from_handle(l3 as u32)
                            };
                            Ok(e)
                        }
                        1 => {
                            let e = {
                                let l4 = i32::from(*ptr1.add(4).cast::<u8>());
                                use super::super::super::wasm_robotics::robotics::types::AccessError as V11;
                                let v11 = match l4 {
                                    0 => {
                                        let e11 = {
                                            let l5 = *ptr1.add(8).cast::<*mut u8>();
                                            let l6 = *ptr1.add(12).cast::<usize>();
                                            let len7 = l6;
                                            let bytes7 =
                                                _rt::Vec::from_raw_parts(l5.cast(), len7, len7);

                                            _rt::string_lift(bytes7)
                                        };
                                        V11::NamedResourceNotFound(e11)
                                    }
                                    n => {
                                        debug_assert_eq!(n, 1, "invalid enum discriminant");
                                        let e11 = {
                                            let l8 = *ptr1.add(8).cast::<*mut u8>();
                                            let l9 = *ptr1.add(12).cast::<usize>();
                                            let len10 = l9;
                                            let bytes10 =
                                                _rt::Vec::from_raw_parts(l8.cast(), len10, len10);

                                            _rt::string_lift(bytes10)
                                        };
                                        V11::HardwareAccessError(e11)
                                    }
                                };

                                v11
                            };
                            Err(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    }
                }
            }
            impl Imu {
                #[allow(unused_unsafe, clippy::all)]
                pub fn calibrate(&self) -> Result<CalibrationData, AccessError> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 28]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 28]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasm-robotics:robotics/imus@0.1.0")]
                        extern "C" {
                            #[link_name = "[method]imu.calibrate"]
                            fn wit_import(_: i32, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                        match l1 {
                            0 => {
                                let e = {
                                    let l2 = i32::from(*ptr0.add(4).cast::<u8>());
                                    let l3 = i32::from(*ptr0.add(5).cast::<u8>());
                                    let l4 = i32::from(*ptr0.add(6).cast::<u8>());
                                    let l5 = i32::from(*ptr0.add(7).cast::<u8>());
                                    let l6 = i32::from(*ptr0.add(8).cast::<u8>());
                                    let l7 = i32::from(*ptr0.add(9).cast::<u8>());
                                    let l8 = i32::from(*ptr0.add(10).cast::<u8>());
                                    let l9 = i32::from(*ptr0.add(11).cast::<u8>());
                                    let l10 = i32::from(*ptr0.add(12).cast::<u8>());
                                    let l11 = i32::from(*ptr0.add(13).cast::<u8>());
                                    let l12 = i32::from(*ptr0.add(14).cast::<u8>());
                                    let l13 = i32::from(*ptr0.add(15).cast::<u8>());
                                    let l14 = i32::from(*ptr0.add(16).cast::<u8>());
                                    let l15 = i32::from(*ptr0.add(17).cast::<u8>());
                                    let l16 = i32::from(*ptr0.add(18).cast::<u8>());
                                    let l17 = i32::from(*ptr0.add(19).cast::<u8>());
                                    let l18 = i32::from(*ptr0.add(20).cast::<u8>());
                                    let l19 = i32::from(*ptr0.add(21).cast::<u8>());
                                    let l20 = i32::from(*ptr0.add(22).cast::<u8>());
                                    let l21 = i32::from(*ptr0.add(23).cast::<u8>());
                                    let l22 = i32::from(*ptr0.add(24).cast::<u8>());
                                    let l23 = i32::from(*ptr0.add(25).cast::<u8>());

                                    CalibrationData {
                                        acc_offset_x_lsb: l2 as u8,
                                        acc_offset_x_msb: l3 as u8,
                                        acc_offset_y_lsb: l4 as u8,
                                        acc_offset_y_msb: l5 as u8,
                                        acc_offset_z_lsb: l6 as u8,
                                        acc_offset_z_msb: l7 as u8,
                                        mag_offset_x_lsb: l8 as u8,
                                        mag_offset_x_msb: l9 as u8,
                                        mag_offset_y_lsb: l10 as u8,
                                        mag_offset_y_msb: l11 as u8,
                                        mag_offset_z_lsb: l12 as u8,
                                        mag_offset_z_msb: l13 as u8,
                                        gyr_offset_x_lsb: l14 as u8,
                                        gyr_offset_x_msb: l15 as u8,
                                        gyr_offset_y_lsb: l16 as u8,
                                        gyr_offset_y_msb: l17 as u8,
                                        gyr_offset_z_lsb: l18 as u8,
                                        gyr_offset_z_msb: l19 as u8,
                                        acc_radius_lsb: l20 as u8,
                                        acc_radius_msb: l21 as u8,
                                        mag_radius_lsb: l22 as u8,
                                        mag_radius_msb: l23 as u8,
                                    }
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l24 = i32::from(*ptr0.add(4).cast::<u8>());
                                    use super::super::super::wasm_robotics::robotics::types::AccessError as V31;
                                    let v31 = match l24 {
                                        0 => {
                                            let e31 = {
                                                let l25 = *ptr0.add(8).cast::<*mut u8>();
                                                let l26 = *ptr0.add(12).cast::<usize>();
                                                let len27 = l26;
                                                let bytes27 = _rt::Vec::from_raw_parts(
                                                    l25.cast(),
                                                    len27,
                                                    len27,
                                                );

                                                _rt::string_lift(bytes27)
                                            };
                                            V31::NamedResourceNotFound(e31)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 1, "invalid enum discriminant");
                                            let e31 = {
                                                let l28 = *ptr0.add(8).cast::<*mut u8>();
                                                let l29 = *ptr0.add(12).cast::<usize>();
                                                let len30 = l29;
                                                let bytes30 = _rt::Vec::from_raw_parts(
                                                    l28.cast(),
                                                    len30,
                                                    len30,
                                                );

                                                _rt::string_lift(bytes30)
                                            };
                                            V31::HardwareAccessError(e31)
                                        }
                                    };

                                    v31
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl Imu {
                #[allow(unused_unsafe, clippy::all)]
                pub fn set_calibration(&self, data: CalibrationData) -> Result<(), AccessError> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 28]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 28]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        *ptr0.add(0).cast::<i32>() = (self).handle() as i32;
                        let CalibrationData {
                            acc_offset_x_lsb: acc_offset_x_lsb1,
                            acc_offset_x_msb: acc_offset_x_msb1,
                            acc_offset_y_lsb: acc_offset_y_lsb1,
                            acc_offset_y_msb: acc_offset_y_msb1,
                            acc_offset_z_lsb: acc_offset_z_lsb1,
                            acc_offset_z_msb: acc_offset_z_msb1,
                            mag_offset_x_lsb: mag_offset_x_lsb1,
                            mag_offset_x_msb: mag_offset_x_msb1,
                            mag_offset_y_lsb: mag_offset_y_lsb1,
                            mag_offset_y_msb: mag_offset_y_msb1,
                            mag_offset_z_lsb: mag_offset_z_lsb1,
                            mag_offset_z_msb: mag_offset_z_msb1,
                            gyr_offset_x_lsb: gyr_offset_x_lsb1,
                            gyr_offset_x_msb: gyr_offset_x_msb1,
                            gyr_offset_y_lsb: gyr_offset_y_lsb1,
                            gyr_offset_y_msb: gyr_offset_y_msb1,
                            gyr_offset_z_lsb: gyr_offset_z_lsb1,
                            gyr_offset_z_msb: gyr_offset_z_msb1,
                            acc_radius_lsb: acc_radius_lsb1,
                            acc_radius_msb: acc_radius_msb1,
                            mag_radius_lsb: mag_radius_lsb1,
                            mag_radius_msb: mag_radius_msb1,
                        } = data;
                        *ptr0.add(4).cast::<u8>() = (_rt::as_i32(acc_offset_x_lsb1)) as u8;
                        *ptr0.add(5).cast::<u8>() = (_rt::as_i32(acc_offset_x_msb1)) as u8;
                        *ptr0.add(6).cast::<u8>() = (_rt::as_i32(acc_offset_y_lsb1)) as u8;
                        *ptr0.add(7).cast::<u8>() = (_rt::as_i32(acc_offset_y_msb1)) as u8;
                        *ptr0.add(8).cast::<u8>() = (_rt::as_i32(acc_offset_z_lsb1)) as u8;
                        *ptr0.add(9).cast::<u8>() = (_rt::as_i32(acc_offset_z_msb1)) as u8;
                        *ptr0.add(10).cast::<u8>() = (_rt::as_i32(mag_offset_x_lsb1)) as u8;
                        *ptr0.add(11).cast::<u8>() = (_rt::as_i32(mag_offset_x_msb1)) as u8;
                        *ptr0.add(12).cast::<u8>() = (_rt::as_i32(mag_offset_y_lsb1)) as u8;
                        *ptr0.add(13).cast::<u8>() = (_rt::as_i32(mag_offset_y_msb1)) as u8;
                        *ptr0.add(14).cast::<u8>() = (_rt::as_i32(mag_offset_z_lsb1)) as u8;
                        *ptr0.add(15).cast::<u8>() = (_rt::as_i32(mag_offset_z_msb1)) as u8;
                        *ptr0.add(16).cast::<u8>() = (_rt::as_i32(gyr_offset_x_lsb1)) as u8;
                        *ptr0.add(17).cast::<u8>() = (_rt::as_i32(gyr_offset_x_msb1)) as u8;
                        *ptr0.add(18).cast::<u8>() = (_rt::as_i32(gyr_offset_y_lsb1)) as u8;
                        *ptr0.add(19).cast::<u8>() = (_rt::as_i32(gyr_offset_y_msb1)) as u8;
                        *ptr0.add(20).cast::<u8>() = (_rt::as_i32(gyr_offset_z_lsb1)) as u8;
                        *ptr0.add(21).cast::<u8>() = (_rt::as_i32(gyr_offset_z_msb1)) as u8;
                        *ptr0.add(22).cast::<u8>() = (_rt::as_i32(acc_radius_lsb1)) as u8;
                        *ptr0.add(23).cast::<u8>() = (_rt::as_i32(acc_radius_msb1)) as u8;
                        *ptr0.add(24).cast::<u8>() = (_rt::as_i32(mag_radius_lsb1)) as u8;
                        *ptr0.add(25).cast::<u8>() = (_rt::as_i32(mag_radius_msb1)) as u8;
                        let ptr2 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasm-robotics:robotics/imus@0.1.0")]
                        extern "C" {
                            #[link_name = "[method]imu.set-calibration"]
                            fn wit_import(_: *mut u8, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: *mut u8, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import(ptr0, ptr2);
                        let l3 = i32::from(*ptr2.add(0).cast::<u8>());
                        match l3 {
                            0 => {
                                let e = ();
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l4 = i32::from(*ptr2.add(4).cast::<u8>());
                                    use super::super::super::wasm_robotics::robotics::types::AccessError as V11;
                                    let v11 = match l4 {
                                        0 => {
                                            let e11 = {
                                                let l5 = *ptr2.add(8).cast::<*mut u8>();
                                                let l6 = *ptr2.add(12).cast::<usize>();
                                                let len7 = l6;
                                                let bytes7 =
                                                    _rt::Vec::from_raw_parts(l5.cast(), len7, len7);

                                                _rt::string_lift(bytes7)
                                            };
                                            V11::NamedResourceNotFound(e11)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 1, "invalid enum discriminant");
                                            let e11 = {
                                                let l8 = *ptr2.add(8).cast::<*mut u8>();
                                                let l9 = *ptr2.add(12).cast::<usize>();
                                                let len10 = l9;
                                                let bytes10 = _rt::Vec::from_raw_parts(
                                                    l8.cast(),
                                                    len10,
                                                    len10,
                                                );

                                                _rt::string_lift(bytes10)
                                            };
                                            V11::HardwareAccessError(e11)
                                        }
                                    };

                                    v11
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl Imu {
                #[allow(unused_unsafe, clippy::all)]
                /// TODO: should this be part of the API which makes it very BNO055 specific? or more general and include this in the hardware map?
                pub fn set_external_crystal(&self, enabled: bool) -> Result<(), AccessError> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 16]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 16]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasm-robotics:robotics/imus@0.1.0")]
                        extern "C" {
                            #[link_name = "[method]imu.set-external-crystal"]
                            fn wit_import(_: i32, _: i32, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import(
                            (self).handle() as i32,
                            match &enabled {
                                true => 1,
                                false => 0,
                            },
                            ptr0,
                        );
                        let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                        match l1 {
                            0 => {
                                let e = ();
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l2 = i32::from(*ptr0.add(4).cast::<u8>());
                                    use super::super::super::wasm_robotics::robotics::types::AccessError as V9;
                                    let v9 = match l2 {
                                        0 => {
                                            let e9 = {
                                                let l3 = *ptr0.add(8).cast::<*mut u8>();
                                                let l4 = *ptr0.add(12).cast::<usize>();
                                                let len5 = l4;
                                                let bytes5 =
                                                    _rt::Vec::from_raw_parts(l3.cast(), len5, len5);

                                                _rt::string_lift(bytes5)
                                            };
                                            V9::NamedResourceNotFound(e9)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 1, "invalid enum discriminant");
                                            let e9 = {
                                                let l6 = *ptr0.add(8).cast::<*mut u8>();
                                                let l7 = *ptr0.add(12).cast::<usize>();
                                                let len8 = l7;
                                                let bytes8 =
                                                    _rt::Vec::from_raw_parts(l6.cast(), len8, len8);

                                                _rt::string_lift(bytes8)
                                            };
                                            V9::HardwareAccessError(e9)
                                        }
                                    };

                                    v9
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl Imu {
                #[allow(unused_unsafe, clippy::all)]
                pub fn set_axis_remap(&self, remap: AxisRemap) -> Result<(), AccessError> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 16]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 16]);
                        let AxisRemap {
                            x: x0,
                            y: y0,
                            z: z0,
                        } = remap;
                        let ptr1 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasm-robotics:robotics/imus@0.1.0")]
                        extern "C" {
                            #[link_name = "[method]imu.set-axis-remap"]
                            fn wit_import(_: i32, _: i32, _: i32, _: i32, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: i32, _: i32, _: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import(
                            (self).handle() as i32,
                            x0.clone() as i32,
                            y0.clone() as i32,
                            z0.clone() as i32,
                            ptr1,
                        );
                        let l2 = i32::from(*ptr1.add(0).cast::<u8>());
                        match l2 {
                            0 => {
                                let e = ();
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l3 = i32::from(*ptr1.add(4).cast::<u8>());
                                    use super::super::super::wasm_robotics::robotics::types::AccessError as V10;
                                    let v10 = match l3 {
                                        0 => {
                                            let e10 = {
                                                let l4 = *ptr1.add(8).cast::<*mut u8>();
                                                let l5 = *ptr1.add(12).cast::<usize>();
                                                let len6 = l5;
                                                let bytes6 =
                                                    _rt::Vec::from_raw_parts(l4.cast(), len6, len6);

                                                _rt::string_lift(bytes6)
                                            };
                                            V10::NamedResourceNotFound(e10)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 1, "invalid enum discriminant");
                                            let e10 = {
                                                let l7 = *ptr1.add(8).cast::<*mut u8>();
                                                let l8 = *ptr1.add(12).cast::<usize>();
                                                let len9 = l8;
                                                let bytes9 =
                                                    _rt::Vec::from_raw_parts(l7.cast(), len9, len9);

                                                _rt::string_lift(bytes9)
                                            };
                                            V10::HardwareAccessError(e10)
                                        }
                                    };

                                    v10
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl Imu {
                #[allow(unused_unsafe, clippy::all)]
                pub fn axis_remap(&self) -> Result<AxisRemap, AccessError> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 16]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 16]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasm-robotics:robotics/imus@0.1.0")]
                        extern "C" {
                            #[link_name = "[method]imu.axis-remap"]
                            fn wit_import(_: i32, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                        match l1 {
                            0 => {
                                let e = {
                                    let l2 = i32::from(*ptr0.add(4).cast::<u8>());
                                    let l3 = i32::from(*ptr0.add(5).cast::<u8>());
                                    let l4 = i32::from(*ptr0.add(6).cast::<u8>());

                                    AxisRemap {
                                        x: AxisConfig::_lift(l2 as u8),
                                        y: AxisConfig::_lift(l3 as u8),
                                        z: AxisConfig::_lift(l4 as u8),
                                    }
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l5 = i32::from(*ptr0.add(4).cast::<u8>());
                                    use super::super::super::wasm_robotics::robotics::types::AccessError as V12;
                                    let v12 = match l5 {
                                        0 => {
                                            let e12 = {
                                                let l6 = *ptr0.add(8).cast::<*mut u8>();
                                                let l7 = *ptr0.add(12).cast::<usize>();
                                                let len8 = l7;
                                                let bytes8 =
                                                    _rt::Vec::from_raw_parts(l6.cast(), len8, len8);

                                                _rt::string_lift(bytes8)
                                            };
                                            V12::NamedResourceNotFound(e12)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 1, "invalid enum discriminant");
                                            let e12 = {
                                                let l9 = *ptr0.add(8).cast::<*mut u8>();
                                                let l10 = *ptr0.add(12).cast::<usize>();
                                                let len11 = l10;
                                                let bytes11 = _rt::Vec::from_raw_parts(
                                                    l9.cast(),
                                                    len11,
                                                    len11,
                                                );

                                                _rt::string_lift(bytes11)
                                            };
                                            V12::HardwareAccessError(e12)
                                        }
                                    };

                                    v12
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl Imu {
                #[allow(unused_unsafe, clippy::all)]
                pub fn set_axis_signs(&self, signs: AxisSigns) -> Result<(), AccessError> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 16]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 16]);
                        let AxisSigns {
                            x_negative: x_negative0,
                            y_negative: y_negative0,
                            z_negative: z_negative0,
                        } = signs;
                        let ptr1 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasm-robotics:robotics/imus@0.1.0")]
                        extern "C" {
                            #[link_name = "[method]imu.set-axis-signs"]
                            fn wit_import(_: i32, _: i32, _: i32, _: i32, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: i32, _: i32, _: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import(
                            (self).handle() as i32,
                            match x_negative0 {
                                true => 1,
                                false => 0,
                            },
                            match y_negative0 {
                                true => 1,
                                false => 0,
                            },
                            match z_negative0 {
                                true => 1,
                                false => 0,
                            },
                            ptr1,
                        );
                        let l2 = i32::from(*ptr1.add(0).cast::<u8>());
                        match l2 {
                            0 => {
                                let e = ();
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l3 = i32::from(*ptr1.add(4).cast::<u8>());
                                    use super::super::super::wasm_robotics::robotics::types::AccessError as V10;
                                    let v10 = match l3 {
                                        0 => {
                                            let e10 = {
                                                let l4 = *ptr1.add(8).cast::<*mut u8>();
                                                let l5 = *ptr1.add(12).cast::<usize>();
                                                let len6 = l5;
                                                let bytes6 =
                                                    _rt::Vec::from_raw_parts(l4.cast(), len6, len6);

                                                _rt::string_lift(bytes6)
                                            };
                                            V10::NamedResourceNotFound(e10)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 1, "invalid enum discriminant");
                                            let e10 = {
                                                let l7 = *ptr1.add(8).cast::<*mut u8>();
                                                let l8 = *ptr1.add(12).cast::<usize>();
                                                let len9 = l8;
                                                let bytes9 =
                                                    _rt::Vec::from_raw_parts(l7.cast(), len9, len9);

                                                _rt::string_lift(bytes9)
                                            };
                                            V10::HardwareAccessError(e10)
                                        }
                                    };

                                    v10
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl Imu {
                #[allow(unused_unsafe, clippy::all)]
                pub fn axis_signs(&self) -> Result<AxisSigns, AccessError> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 16]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 16]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasm-robotics:robotics/imus@0.1.0")]
                        extern "C" {
                            #[link_name = "[method]imu.axis-signs"]
                            fn wit_import(_: i32, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                        match l1 {
                            0 => {
                                let e = {
                                    let l2 = i32::from(*ptr0.add(4).cast::<u8>());
                                    let l3 = i32::from(*ptr0.add(5).cast::<u8>());
                                    let l4 = i32::from(*ptr0.add(6).cast::<u8>());

                                    AxisSigns {
                                        x_negative: _rt::bool_lift(l2 as u8),
                                        y_negative: _rt::bool_lift(l3 as u8),
                                        z_negative: _rt::bool_lift(l4 as u8),
                                    }
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l5 = i32::from(*ptr0.add(4).cast::<u8>());
                                    use super::super::super::wasm_robotics::robotics::types::AccessError as V12;
                                    let v12 = match l5 {
                                        0 => {
                                            let e12 = {
                                                let l6 = *ptr0.add(8).cast::<*mut u8>();
                                                let l7 = *ptr0.add(12).cast::<usize>();
                                                let len8 = l7;
                                                let bytes8 =
                                                    _rt::Vec::from_raw_parts(l6.cast(), len8, len8);

                                                _rt::string_lift(bytes8)
                                            };
                                            V12::NamedResourceNotFound(e12)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 1, "invalid enum discriminant");
                                            let e12 = {
                                                let l9 = *ptr0.add(8).cast::<*mut u8>();
                                                let l10 = *ptr0.add(12).cast::<usize>();
                                                let len11 = l10;
                                                let bytes11 = _rt::Vec::from_raw_parts(
                                                    l9.cast(),
                                                    len11,
                                                    len11,
                                                );

                                                _rt::string_lift(bytes11)
                                            };
                                            V12::HardwareAccessError(e12)
                                        }
                                    };

                                    v12
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl Imu {
                #[allow(unused_unsafe, clippy::all)]
                pub fn set_power_mode(&self, mode: PowerMode) -> Result<(), AccessError> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 16]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 16]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasm-robotics:robotics/imus@0.1.0")]
                        extern "C" {
                            #[link_name = "[method]imu.set-power-mode"]
                            fn wit_import(_: i32, _: i32, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, mode.clone() as i32, ptr0);
                        let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                        match l1 {
                            0 => {
                                let e = ();
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l2 = i32::from(*ptr0.add(4).cast::<u8>());
                                    use super::super::super::wasm_robotics::robotics::types::AccessError as V9;
                                    let v9 = match l2 {
                                        0 => {
                                            let e9 = {
                                                let l3 = *ptr0.add(8).cast::<*mut u8>();
                                                let l4 = *ptr0.add(12).cast::<usize>();
                                                let len5 = l4;
                                                let bytes5 =
                                                    _rt::Vec::from_raw_parts(l3.cast(), len5, len5);

                                                _rt::string_lift(bytes5)
                                            };
                                            V9::NamedResourceNotFound(e9)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 1, "invalid enum discriminant");
                                            let e9 = {
                                                let l6 = *ptr0.add(8).cast::<*mut u8>();
                                                let l7 = *ptr0.add(12).cast::<usize>();
                                                let len8 = l7;
                                                let bytes8 =
                                                    _rt::Vec::from_raw_parts(l6.cast(), len8, len8);

                                                _rt::string_lift(bytes8)
                                            };
                                            V9::HardwareAccessError(e9)
                                        }
                                    };

                                    v9
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl Imu {
                #[allow(unused_unsafe, clippy::all)]
                pub fn quaternion(&self) -> Result<Quaternion, AccessError> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 20]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 20]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasm-robotics:robotics/imus@0.1.0")]
                        extern "C" {
                            #[link_name = "[method]imu.quaternion"]
                            fn wit_import(_: i32, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                        match l1 {
                            0 => {
                                let e = {
                                    let l2 = *ptr0.add(4).cast::<f32>();
                                    let l3 = *ptr0.add(8).cast::<f32>();
                                    let l4 = *ptr0.add(12).cast::<f32>();
                                    let l5 = *ptr0.add(16).cast::<f32>();

                                    super::super::super::wasm_robotics::robotics::types::Quaternion{
                    x: l2,
                    y: l3,
                    z: l4,
                    w: l5,
                  }
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l6 = i32::from(*ptr0.add(4).cast::<u8>());
                                    use super::super::super::wasm_robotics::robotics::types::AccessError as V13;
                                    let v13 = match l6 {
                                        0 => {
                                            let e13 = {
                                                let l7 = *ptr0.add(8).cast::<*mut u8>();
                                                let l8 = *ptr0.add(12).cast::<usize>();
                                                let len9 = l8;
                                                let bytes9 =
                                                    _rt::Vec::from_raw_parts(l7.cast(), len9, len9);

                                                _rt::string_lift(bytes9)
                                            };
                                            V13::NamedResourceNotFound(e13)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 1, "invalid enum discriminant");
                                            let e13 = {
                                                let l10 = *ptr0.add(8).cast::<*mut u8>();
                                                let l11 = *ptr0.add(12).cast::<usize>();
                                                let len12 = l11;
                                                let bytes12 = _rt::Vec::from_raw_parts(
                                                    l10.cast(),
                                                    len12,
                                                    len12,
                                                );

                                                _rt::string_lift(bytes12)
                                            };
                                            V13::HardwareAccessError(e13)
                                        }
                                    };

                                    v13
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
        }
    }
}
pub mod exports {
    pub mod wasm_robotics {
        pub mod robotics {
            #[allow(clippy::all)]
            pub mod run {
                #[used]
                #[doc(hidden)]
                #[cfg(target_arch = "wasm32")]
                static __FORCE_SECTION_REF: fn() =
                    super::super::super::super::__link_custom_section_describing_imports;
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_run_cabi<T: Guest>(arg0: i32) {
                    T::run(arg0 as u32);
                }
                pub trait Guest {
                    fn run(loop_count: u32);
                }
                #[doc(hidden)]

                macro_rules! __export_wasm_robotics_robotics_run_0_1_0_cabi{
        ($ty:ident with_types_in $($path_to_types:tt)*) => (const _: () = {

          #[export_name = "wasm-robotics:robotics/run@0.1.0#run"]
          unsafe extern "C" fn export_run(arg0: i32,) {
            $($path_to_types)*::_export_run_cabi::<$ty>(arg0)
          }
        };);
      }
                #[doc(hidden)]
                pub(crate) use __export_wasm_robotics_robotics_run_0_1_0_cabi;
            }
        }
    }
}
mod _rt {
    pub use alloc_crate::string::String;

    use core::fmt;
    use core::marker;
    use core::sync::atomic::{AtomicU32, Ordering::Relaxed};

    /// A type which represents a component model resource, either imported or
    /// exported into this component.
    ///
    /// This is a low-level wrapper which handles the lifetime of the resource
    /// (namely this has a destructor). The `T` provided defines the component model
    /// intrinsics that this wrapper uses.
    ///
    /// One of the chief purposes of this type is to provide `Deref` implementations
    /// to access the underlying data when it is owned.
    ///
    /// This type is primarily used in generated code for exported and imported
    /// resources.
    #[repr(transparent)]
    pub struct Resource<T: WasmResource> {
        // NB: This would ideally be `u32` but it is not. The fact that this has
        // interior mutability is not exposed in the API of this type except for the
        // `take_handle` method which is supposed to in theory be private.
        //
        // This represents, almost all the time, a valid handle value. When it's
        // invalid it's stored as `u32::MAX`.
        handle: AtomicU32,
        _marker: marker::PhantomData<T>,
    }

    /// A trait which all wasm resources implement, namely providing the ability to
    /// drop a resource.
    ///
    /// This generally is implemented by generated code, not user-facing code.
    pub unsafe trait WasmResource {
        /// Invokes the `[resource-drop]...` intrinsic.
        unsafe fn drop(handle: u32);
    }

    impl<T: WasmResource> Resource<T> {
        #[doc(hidden)]
        pub unsafe fn from_handle(handle: u32) -> Self {
            debug_assert!(handle != u32::MAX);
            Self {
                handle: AtomicU32::new(handle),
                _marker: marker::PhantomData,
            }
        }

        /// Takes ownership of the handle owned by `resource`.
        ///
        /// Note that this ideally would be `into_handle` taking `Resource<T>` by
        /// ownership. The code generator does not enable that in all situations,
        /// unfortunately, so this is provided instead.
        ///
        /// Also note that `take_handle` is in theory only ever called on values
        /// owned by a generated function. For example a generated function might
        /// take `Resource<T>` as an argument but then call `take_handle` on a
        /// reference to that argument. In that sense the dynamic nature of
        /// `take_handle` should only be exposed internally to generated code, not
        /// to user code.
        #[doc(hidden)]
        pub fn take_handle(resource: &Resource<T>) -> u32 {
            resource.handle.swap(u32::MAX, Relaxed)
        }

        #[doc(hidden)]
        pub fn handle(resource: &Resource<T>) -> u32 {
            resource.handle.load(Relaxed)
        }
    }

    impl<T: WasmResource> fmt::Debug for Resource<T> {
        fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
            f.debug_struct("Resource")
                .field("handle", &self.handle)
                .finish()
        }
    }

    impl<T: WasmResource> Drop for Resource<T> {
        fn drop(&mut self) {
            unsafe {
                match self.handle.load(Relaxed) {
                    // If this handle was "taken" then don't do anything in the
                    // destructor.
                    u32::MAX => {}

                    // ... but otherwise do actually destroy it with the imported
                    // component model intrinsic as defined through `T`.
                    other => T::drop(other),
                }
            }
        }
    }
    pub use alloc_crate::vec::Vec;
    pub unsafe fn string_lift(bytes: Vec<u8>) -> String {
        if cfg!(debug_assertions) {
            String::from_utf8(bytes).unwrap()
        } else {
            String::from_utf8_unchecked(bytes)
        }
    }
    pub unsafe fn invalid_enum_discriminant<T>() -> T {
        if cfg!(debug_assertions) {
            panic!("invalid enum discriminant")
        } else {
            core::hint::unreachable_unchecked()
        }
    }

    pub fn as_i32<T: AsI32>(t: T) -> i32 {
        t.as_i32()
    }

    pub trait AsI32 {
        fn as_i32(self) -> i32;
    }

    impl<'a, T: Copy + AsI32> AsI32 for &'a T {
        fn as_i32(self) -> i32 {
            (*self).as_i32()
        }
    }

    impl AsI32 for i32 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for u32 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for i16 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for u16 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for i8 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for u8 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for char {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for usize {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    pub unsafe fn bool_lift(val: u8) -> bool {
        if cfg!(debug_assertions) {
            match val {
                0 => false,
                1 => true,
                _ => panic!("invalid bool discriminant"),
            }
        } else {
            ::core::mem::transmute::<u8, bool>(val)
        }
    }
    extern crate alloc as alloc_crate;
}

/// Generates `#[no_mangle]` functions to export the specified type as the
/// root implementation of all generated traits.
///
/// For more information see the documentation of `wit_bindgen::generate!`.
///
/// ```rust
/// # macro_rules! export{ ($($t:tt)*) => (); }
/// # trait Guest {}
/// struct MyType;
///
/// impl Guest for MyType {
///     // ...
/// }
///
/// export!(MyType);
/// ```
#[allow(unused_macros)]
#[doc(hidden)]

macro_rules! __export_imu_client_impl {
  ($ty:ident) => (self::export!($ty with_types_in self););
  ($ty:ident with_types_in $($path_to_types_root:tt)*) => (
  $($path_to_types_root)*::exports::wasm_robotics::robotics::run::__export_wasm_robotics_robotics_run_0_1_0_cabi!($ty with_types_in $($path_to_types_root)*::exports::wasm_robotics::robotics::run);
  )
}
#[doc(inline)]
pub(crate) use __export_imu_client_impl as export;

#[cfg(target_arch = "wasm32")]
#[link_section = "component-type:wit-bindgen:0.21.0:imu-client:encoded world"]
#[doc(hidden)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 1566] = *b"\
\0asm\x0d\0\x01\0\0\x19\x16wit-component-encoding\x04\0\x07\x9d\x0b\x01A\x02\x01\
A\x08\x01B\x04\x01q\x02\x18named-resource-not-found\x01s\0\x15hardware-access-er\
ror\x01s\0\x04\0\x0caccess-error\x03\0\0\x01r\x04\x01xv\x01yv\x01zv\x01wv\x04\0\x0a\
quaternion\x03\0\x02\x03\x01\"wasm-robotics:robotics/types@0.1.0\x05\0\x02\x03\0\
\0\x0caccess-error\x02\x03\0\0\x0aquaternion\x01B+\x02\x03\x02\x01\x01\x04\0\x0c\
access-error\x03\0\0\x02\x03\x02\x01\x02\x04\0\x0aquaternion\x03\0\x02\x01r\x16\x10\
acc-offset-x-lsb}\x10acc-offset-x-msb}\x10acc-offset-y-lsb}\x10acc-offset-y-msb}\
\x10acc-offset-z-lsb}\x10acc-offset-z-msb}\x10mag-offset-x-lsb}\x10mag-offset-x-\
msb}\x10mag-offset-y-lsb}\x10mag-offset-y-msb}\x10mag-offset-z-lsb}\x10mag-offse\
t-z-msb}\x10gyr-offset-x-lsb}\x10gyr-offset-x-msb}\x10gyr-offset-y-lsb}\x10gyr-o\
ffset-y-msb}\x10gyr-offset-z-lsb}\x10gyr-offset-z-msb}\x0eacc-radius-lsb}\x0eacc\
-radius-msb}\x0emag-radius-lsb}\x0emag-radius-msb}\x04\0\x10calibration-data\x03\
\0\x04\x01r\x03\x0ax-negative\x7f\x0ay-negative\x7f\x0az-negative\x7f\x04\0\x0aa\
xis-signs\x03\0\x06\x01m\x03\x06axis-x\x06axis-y\x06axis-z\x04\0\x0baxis-config\x03\
\0\x08\x01r\x03\x01x\x09\x01y\x09\x01z\x09\x04\0\x0aaxis-remap\x03\0\x0a\x01m\x03\
\x06NORMAL\x09LOW-POWER\x07SUSPEND\x04\0\x0apower-mode\x03\0\x0c\x04\0\x03imu\x03\
\x01\x01h\x0e\x01j\x01\x05\x01\x01\x01@\x01\x04self\x0f\0\x10\x04\0\x15[method]i\
mu.calibrate\x01\x11\x01j\0\x01\x01\x01@\x02\x04self\x0f\x04data\x05\0\x12\x04\0\
\x1b[method]imu.set-calibration\x01\x13\x01@\x02\x04self\x0f\x07enabled\x7f\0\x12\
\x04\0\x20[method]imu.set-external-crystal\x01\x14\x01@\x02\x04self\x0f\x05remap\
\x0b\0\x12\x04\0\x1a[method]imu.set-axis-remap\x01\x15\x01j\x01\x0b\x01\x01\x01@\
\x01\x04self\x0f\0\x16\x04\0\x16[method]imu.axis-remap\x01\x17\x01@\x02\x04self\x0f\
\x05signs\x07\0\x12\x04\0\x1a[method]imu.set-axis-signs\x01\x18\x01j\x01\x07\x01\
\x01\x01@\x01\x04self\x0f\0\x19\x04\0\x16[method]imu.axis-signs\x01\x1a\x01@\x02\
\x04self\x0f\x04mode\x0d\0\x12\x04\0\x1a[method]imu.set-power-mode\x01\x1b\x01j\x01\
\x03\x01\x01\x01@\x01\x04self\x0f\0\x1c\x04\0\x16[method]imu.quaternion\x01\x1d\x01\
i\x0e\x01j\x01\x1e\x01\x01\x01@\x01\x04names\0\x1f\x04\0\x09imu-named\x01\x20\x03\
\x01!wasm-robotics:robotics/imus@0.1.0\x05\x03\x01B\x02\x01@\x01\x0aloop-county\x01\
\0\x04\0\x03run\x01\0\x04\x01\x20wasm-robotics:robotics/run@0.1.0\x05\x04\x04\x01\
'wasm-robotics:robotics/imu-client@0.1.0\x04\0\x0b\x10\x01\0\x0aimu-client\x03\0\
\0\0G\x09producers\x01\x0cprocessed-by\x02\x0dwit-component\x070.201.0\x10wit-bi\
ndgen-rust\x060.21.0";

#[inline(never)]
#[doc(hidden)]
#[cfg(target_arch = "wasm32")]
pub fn __link_custom_section_describing_imports() {
    wit_bindgen_rt::maybe_link_cabi_realloc();
}
