// Generated by `wit-bindgen` 0.21.0. DO NOT EDIT!
// Options used:
pub mod wasm_robotics {
    pub mod robotics {
        #[allow(clippy::all)]
        pub mod delay {
            #[used]
            #[doc(hidden)]
            #[cfg(target_arch = "wasm32")]
            static __FORCE_SECTION_REF: fn() =
                super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            /// constructor
            /// Delay with up to nanosecond precision.

            #[derive(Debug)]
            #[repr(transparent)]
            pub struct Delay {
                handle: _rt::Resource<Delay>,
            }

            impl Delay {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: _rt::Resource::from_handle(handle),
                    }
                }

                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }

                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }

            unsafe impl _rt::WasmResource for Delay {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();

                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "wasm-robotics:robotics/delay@0.1.0")]
                        extern "C" {
                            #[link_name = "[resource-drop]delay"]
                            fn drop(_: u32);
                        }

                        drop(_handle);
                    }
                }
            }

            impl Delay {
                #[allow(unused_unsafe, clippy::all)]
                /// JAS - added new to support resource creation
                pub fn new() -> Self {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasm-robotics:robotics/delay@0.1.0")]
                        extern "C" {
                            #[link_name = "[constructor]delay"]
                            fn wit_import() -> i32;
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import() -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import();
                        Delay::from_handle(ret as u32)
                    }
                }
            }
            impl Delay {
                #[allow(unused_unsafe, clippy::all)]
                /// Pauses execution for at minimum `ns` nanoseconds. Pause can be
                /// longer if the implementation requires it due to precision/timing
                /// issues.
                pub fn delay_ns(&self, ns: u32) {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasm-robotics:robotics/delay@0.1.0")]
                        extern "C" {
                            #[link_name = "[method]delay.delay-ns"]
                            fn wit_import(_: i32, _: i32);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: i32) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, _rt::as_i32(&ns));
                    }
                }
            }
        }

        #[allow(clippy::all)]
        pub mod i2c {
            #[used]
            #[doc(hidden)]
            #[cfg(target_arch = "wasm32")]
            static __FORCE_SECTION_REF: fn() =
                super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            /// An address value, in either 7-bit or 10-bit form, depending on the device.
            pub type Address = u16;
            /// No-acknowledge error source.
            ///
            /// In cases where it is possible, a device should indicate if a no
            /// acknowledge response was received to an address versus a no acknowledge
            /// to a data byte. Where it is not possible to differentiate, Unknown
            /// should be indicated.
            #[repr(u8)]
            #[derive(Clone, Copy, Eq, PartialEq)]
            pub enum NoAcknowledgeSource {
                /// The device did not acknowledge its address. The device may be
                /// missing.
                Address,
                /// The device did not acknowledge the data. It may not be ready to
                /// process requests at the moment.
                Data,
                /// Either the device did not acknowledge its address or the data, but
                /// it is unknown which.
                Unknown,
            }
            impl ::core::fmt::Debug for NoAcknowledgeSource {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    match self {
                        NoAcknowledgeSource::Address => {
                            f.debug_tuple("NoAcknowledgeSource::Address").finish()
                        }
                        NoAcknowledgeSource::Data => {
                            f.debug_tuple("NoAcknowledgeSource::Data").finish()
                        }
                        NoAcknowledgeSource::Unknown => {
                            f.debug_tuple("NoAcknowledgeSource::Unknown").finish()
                        }
                    }
                }
            }

            impl NoAcknowledgeSource {
                pub(crate) unsafe fn _lift(val: u8) -> NoAcknowledgeSource {
                    if !cfg!(debug_assertions) {
                        return ::core::mem::transmute(val);
                    }

                    match val {
                        0 => NoAcknowledgeSource::Address,
                        1 => NoAcknowledgeSource::Data,
                        2 => NoAcknowledgeSource::Unknown,

                        _ => panic!("invalid enum discriminant"),
                    }
                }
            }

            /// Operation errors.
            #[derive(Clone, Copy)]
            pub enum ErrorCode {
                /// Bus error occurred. e.g. A START or a STOP condition is detected and
                /// is not located after a multiple of 9 SCL clock pulses.
                Bus,
                /// The arbitration was lost, e.g. electrical problems with the clock signal.
                ArbitrationLoss,
                /// A bus operation was not acknowledged, e.g. due to the addressed
                /// device not being available on the bus or the device not being ready
                /// to process requests at the moment.
                NoAcknowledge(NoAcknowledgeSource),
                /// The peripheral receive buffer was overrun.
                Overrun,
                /// A different error occurred.
                Other,
                /// resource not available
                NotFound,
            }
            impl ::core::fmt::Debug for ErrorCode {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    match self {
                        ErrorCode::Bus => f.debug_tuple("ErrorCode::Bus").finish(),
                        ErrorCode::ArbitrationLoss => {
                            f.debug_tuple("ErrorCode::ArbitrationLoss").finish()
                        }
                        ErrorCode::NoAcknowledge(e) => {
                            f.debug_tuple("ErrorCode::NoAcknowledge").field(e).finish()
                        }
                        ErrorCode::Overrun => f.debug_tuple("ErrorCode::Overrun").finish(),
                        ErrorCode::Other => f.debug_tuple("ErrorCode::Other").finish(),
                        ErrorCode::NotFound => f.debug_tuple("ErrorCode::NotFound").finish(),
                    }
                }
            }
            impl ::core::fmt::Display for ErrorCode {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    write!(f, "{:?}", self)
                }
            }

            impl std::error::Error for ErrorCode {}
            /// An operation used by the `transaction` method.
            #[derive(Clone)]
            pub enum Operation {
                /// Read the give number of bytes.
                Read(u64),
                /// Write the given bytes.
                Write(_rt::Vec<u8>),
            }
            impl ::core::fmt::Debug for Operation {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    match self {
                        Operation::Read(e) => f.debug_tuple("Operation::Read").field(e).finish(),
                        Operation::Write(e) => f.debug_tuple("Operation::Write").field(e).finish(),
                    }
                }
            }

            #[derive(Debug)]
            #[repr(transparent)]
            pub struct I2c {
                handle: _rt::Resource<I2c>,
            }

            impl I2c {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: _rt::Resource::from_handle(handle),
                    }
                }

                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }

                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }

            unsafe impl _rt::WasmResource for I2c {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();

                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "wasm-robotics:robotics/i2c@0.1.0")]
                        extern "C" {
                            #[link_name = "[resource-drop]i2c"]
                            fn drop(_: u32);
                        }

                        drop(_handle);
                    }
                }
            }

            #[allow(unused_unsafe, clippy::all)]
            pub fn i2c_named(identifier: &str) -> Result<I2c, ErrorCode> {
                unsafe {
                    #[repr(align(4))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 8]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 8]);
                    let vec0 = identifier;
                    let ptr0 = vec0.as_ptr().cast::<u8>();
                    let len0 = vec0.len();
                    let ptr1 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "wasm-robotics:robotics/i2c@0.1.0")]
                    extern "C" {
                        #[link_name = "i2c-named"]
                        fn wit_import(_: *mut u8, _: usize, _: *mut u8);
                    }

                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: *mut u8, _: usize, _: *mut u8) {
                        unreachable!()
                    }
                    wit_import(ptr0.cast_mut(), len0, ptr1);
                    let l2 = i32::from(*ptr1.add(0).cast::<u8>());
                    match l2 {
                        0 => {
                            let e = {
                                let l3 = *ptr1.add(4).cast::<i32>();

                                I2c::from_handle(l3 as u32)
                            };
                            Ok(e)
                        }
                        1 => {
                            let e = {
                                let l4 = i32::from(*ptr1.add(4).cast::<u8>());
                                let v6 = match l4 {
                                    0 => ErrorCode::Bus,
                                    1 => ErrorCode::ArbitrationLoss,
                                    2 => {
                                        let e6 = {
                                            let l5 = i32::from(*ptr1.add(5).cast::<u8>());

                                            NoAcknowledgeSource::_lift(l5 as u8)
                                        };
                                        ErrorCode::NoAcknowledge(e6)
                                    }
                                    3 => ErrorCode::Overrun,
                                    4 => ErrorCode::Other,
                                    n => {
                                        debug_assert_eq!(n, 5, "invalid enum discriminant");
                                        ErrorCode::NotFound
                                    }
                                };

                                v6
                            };
                            Err(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    }
                }
            }
            impl I2c {
                #[allow(unused_unsafe, clippy::all)]
                pub fn new(identifier: &str) -> Self {
                    unsafe {
                        let vec0 = identifier;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();

                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasm-robotics:robotics/i2c@0.1.0")]
                        extern "C" {
                            #[link_name = "[constructor]i2c"]
                            fn wit_import(_: *mut u8, _: usize) -> i32;
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: *mut u8, _: usize) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import(ptr0.cast_mut(), len0);
                        I2c::from_handle(ret as u32)
                    }
                }
            }
            impl I2c {
                #[allow(unused_unsafe, clippy::all)]
                /// Execute the provided `operation`s on the I²C bus.
                pub fn transaction(
                    &self,
                    address: Address,
                    operations: &[Operation],
                ) -> Result<_rt::Vec<_rt::Vec<u8>>, ErrorCode> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 12]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 12]);
                        let vec1 = operations;
                        let len1 = vec1.len();
                        let layout1 =
                            _rt::alloc::Layout::from_size_align_unchecked(vec1.len() * 16, 8);
                        let result1 = if layout1.size() != 0 {
                            let ptr = _rt::alloc::alloc(layout1).cast::<u8>();
                            if ptr.is_null() {
                                _rt::alloc::handle_alloc_error(layout1);
                            }
                            ptr
                        } else {
                            {
                                ::core::ptr::null_mut()
                            }
                        };
                        for (i, e) in vec1.into_iter().enumerate() {
                            let base = result1.add(i * 16);
                            {
                                match e {
                                    Operation::Read(e) => {
                                        *base.add(0).cast::<u8>() = (0i32) as u8;
                                        *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                    }
                                    Operation::Write(e) => {
                                        *base.add(0).cast::<u8>() = (1i32) as u8;
                                        let vec0 = e;
                                        let ptr0 = vec0.as_ptr().cast::<u8>();
                                        let len0 = vec0.len();
                                        *base.add(12).cast::<usize>() = len0;
                                        *base.add(8).cast::<*mut u8>() = ptr0.cast_mut();
                                    }
                                }
                            }
                        }
                        let ptr2 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasm-robotics:robotics/i2c@0.1.0")]
                        extern "C" {
                            #[link_name = "[method]i2c.transaction"]
                            fn wit_import(_: i32, _: i32, _: *mut u8, _: usize, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: i32, _: *mut u8, _: usize, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import(
                            (self).handle() as i32,
                            _rt::as_i32(address),
                            result1,
                            len1,
                            ptr2,
                        );
                        let l3 = i32::from(*ptr2.add(0).cast::<u8>());
                        if layout1.size() != 0 {
                            _rt::alloc::dealloc(result1.cast(), layout1);
                        }
                        match l3 {
                            0 => {
                                let e = {
                                    let l4 = *ptr2.add(4).cast::<*mut u8>();
                                    let l5 = *ptr2.add(8).cast::<usize>();
                                    let base9 = l4;
                                    let len9 = l5;
                                    let mut result9 = _rt::Vec::with_capacity(len9);
                                    for i in 0..len9 {
                                        let base = base9.add(i * 8);
                                        let e9 = {
                                            let l6 = *base.add(0).cast::<*mut u8>();
                                            let l7 = *base.add(4).cast::<usize>();
                                            let len8 = l7;

                                            _rt::Vec::from_raw_parts(l6.cast(), len8, len8)
                                        };
                                        result9.push(e9);
                                    }
                                    _rt::cabi_dealloc(base9, len9 * 8, 4);

                                    result9
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l10 = i32::from(*ptr2.add(4).cast::<u8>());
                                    let v12 = match l10 {
                                        0 => ErrorCode::Bus,
                                        1 => ErrorCode::ArbitrationLoss,
                                        2 => {
                                            let e12 = {
                                                let l11 = i32::from(*ptr2.add(5).cast::<u8>());

                                                NoAcknowledgeSource::_lift(l11 as u8)
                                            };
                                            ErrorCode::NoAcknowledge(e12)
                                        }
                                        3 => ErrorCode::Overrun,
                                        4 => ErrorCode::Other,
                                        n => {
                                            debug_assert_eq!(n, 5, "invalid enum discriminant");
                                            ErrorCode::NotFound
                                        }
                                    };

                                    v12
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl I2c {
                #[allow(unused_unsafe, clippy::all)]
                /// Reads `len` bytes from address `address`.
                pub fn read(&self, address: Address, len: u64) -> Result<_rt::Vec<u8>, ErrorCode> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 12]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 12]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasm-robotics:robotics/i2c@0.1.0")]
                        extern "C" {
                            #[link_name = "[method]i2c.read"]
                            fn wit_import(_: i32, _: i32, _: i64, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: i32, _: i64, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import(
                            (self).handle() as i32,
                            _rt::as_i32(address),
                            _rt::as_i64(&len),
                            ptr0,
                        );
                        let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                        match l1 {
                            0 => {
                                let e = {
                                    let l2 = *ptr0.add(4).cast::<*mut u8>();
                                    let l3 = *ptr0.add(8).cast::<usize>();
                                    let len4 = l3;

                                    _rt::Vec::from_raw_parts(l2.cast(), len4, len4)
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l5 = i32::from(*ptr0.add(4).cast::<u8>());
                                    let v7 = match l5 {
                                        0 => ErrorCode::Bus,
                                        1 => ErrorCode::ArbitrationLoss,
                                        2 => {
                                            let e7 = {
                                                let l6 = i32::from(*ptr0.add(5).cast::<u8>());

                                                NoAcknowledgeSource::_lift(l6 as u8)
                                            };
                                            ErrorCode::NoAcknowledge(e7)
                                        }
                                        3 => ErrorCode::Overrun,
                                        4 => ErrorCode::Other,
                                        n => {
                                            debug_assert_eq!(n, 5, "invalid enum discriminant");
                                            ErrorCode::NotFound
                                        }
                                    };

                                    v7
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl I2c {
                #[allow(unused_unsafe, clippy::all)]
                /// Writes bytes to target with address `address`.
                pub fn write(&self, address: Address, data: &[u8]) -> Result<(), ErrorCode> {
                    unsafe {
                        #[repr(align(1))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 3]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 3]);
                        let vec0 = data;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();
                        let ptr1 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasm-robotics:robotics/i2c@0.1.0")]
                        extern "C" {
                            #[link_name = "[method]i2c.write"]
                            fn wit_import(_: i32, _: i32, _: *mut u8, _: usize, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: i32, _: *mut u8, _: usize, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import(
                            (self).handle() as i32,
                            _rt::as_i32(address),
                            ptr0.cast_mut(),
                            len0,
                            ptr1,
                        );
                        let l2 = i32::from(*ptr1.add(0).cast::<u8>());
                        match l2 {
                            0 => {
                                let e = ();
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l3 = i32::from(*ptr1.add(1).cast::<u8>());
                                    let v5 = match l3 {
                                        0 => ErrorCode::Bus,
                                        1 => ErrorCode::ArbitrationLoss,
                                        2 => {
                                            let e5 = {
                                                let l4 = i32::from(*ptr1.add(2).cast::<u8>());

                                                NoAcknowledgeSource::_lift(l4 as u8)
                                            };
                                            ErrorCode::NoAcknowledge(e5)
                                        }
                                        3 => ErrorCode::Overrun,
                                        4 => ErrorCode::Other,
                                        n => {
                                            debug_assert_eq!(n, 5, "invalid enum discriminant");
                                            ErrorCode::NotFound
                                        }
                                    };

                                    v5
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl I2c {
                #[allow(unused_unsafe, clippy::all)]
                /// Writes bytes to address `address` and then reads `read-len` bytes
                /// in a single transaction.
                pub fn write_read(
                    &self,
                    address: Address,
                    write: &[u8],
                    read_len: u64,
                ) -> Result<_rt::Vec<u8>, ErrorCode> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 12]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 12]);
                        let vec0 = write;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();
                        let ptr1 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasm-robotics:robotics/i2c@0.1.0")]
                        extern "C" {
                            #[link_name = "[method]i2c.write-read"]
                            fn wit_import(_: i32, _: i32, _: *mut u8, _: usize, _: i64, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: i32, _: *mut u8, _: usize, _: i64, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import(
                            (self).handle() as i32,
                            _rt::as_i32(address),
                            ptr0.cast_mut(),
                            len0,
                            _rt::as_i64(&read_len),
                            ptr1,
                        );
                        let l2 = i32::from(*ptr1.add(0).cast::<u8>());
                        match l2 {
                            0 => {
                                let e = {
                                    let l3 = *ptr1.add(4).cast::<*mut u8>();
                                    let l4 = *ptr1.add(8).cast::<usize>();
                                    let len5 = l4;

                                    _rt::Vec::from_raw_parts(l3.cast(), len5, len5)
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l6 = i32::from(*ptr1.add(4).cast::<u8>());
                                    let v8 = match l6 {
                                        0 => ErrorCode::Bus,
                                        1 => ErrorCode::ArbitrationLoss,
                                        2 => {
                                            let e8 = {
                                                let l7 = i32::from(*ptr1.add(5).cast::<u8>());

                                                NoAcknowledgeSource::_lift(l7 as u8)
                                            };
                                            ErrorCode::NoAcknowledge(e8)
                                        }
                                        3 => ErrorCode::Overrun,
                                        4 => ErrorCode::Other,
                                        n => {
                                            debug_assert_eq!(n, 5, "invalid enum discriminant");
                                            ErrorCode::NotFound
                                        }
                                    };

                                    v8
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
        }
    }
}
mod _rt {

    use core::fmt;
    use core::marker;
    use core::sync::atomic::{AtomicU32, Ordering::Relaxed};

    /// A type which represents a component model resource, either imported or
    /// exported into this component.
    ///
    /// This is a low-level wrapper which handles the lifetime of the resource
    /// (namely this has a destructor). The `T` provided defines the component model
    /// intrinsics that this wrapper uses.
    ///
    /// One of the chief purposes of this type is to provide `Deref` implementations
    /// to access the underlying data when it is owned.
    ///
    /// This type is primarily used in generated code for exported and imported
    /// resources.
    #[repr(transparent)]
    pub struct Resource<T: WasmResource> {
        // NB: This would ideally be `u32` but it is not. The fact that this has
        // interior mutability is not exposed in the API of this type except for the
        // `take_handle` method which is supposed to in theory be private.
        //
        // This represents, almost all the time, a valid handle value. When it's
        // invalid it's stored as `u32::MAX`.
        handle: AtomicU32,
        _marker: marker::PhantomData<T>,
    }

    /// A trait which all wasm resources implement, namely providing the ability to
    /// drop a resource.
    ///
    /// This generally is implemented by generated code, not user-facing code.
    pub unsafe trait WasmResource {
        /// Invokes the `[resource-drop]...` intrinsic.
        unsafe fn drop(handle: u32);
    }

    impl<T: WasmResource> Resource<T> {
        #[doc(hidden)]
        pub unsafe fn from_handle(handle: u32) -> Self {
            debug_assert!(handle != u32::MAX);
            Self {
                handle: AtomicU32::new(handle),
                _marker: marker::PhantomData,
            }
        }

        /// Takes ownership of the handle owned by `resource`.
        ///
        /// Note that this ideally would be `into_handle` taking `Resource<T>` by
        /// ownership. The code generator does not enable that in all situations,
        /// unfortunately, so this is provided instead.
        ///
        /// Also note that `take_handle` is in theory only ever called on values
        /// owned by a generated function. For example a generated function might
        /// take `Resource<T>` as an argument but then call `take_handle` on a
        /// reference to that argument. In that sense the dynamic nature of
        /// `take_handle` should only be exposed internally to generated code, not
        /// to user code.
        #[doc(hidden)]
        pub fn take_handle(resource: &Resource<T>) -> u32 {
            resource.handle.swap(u32::MAX, Relaxed)
        }

        #[doc(hidden)]
        pub fn handle(resource: &Resource<T>) -> u32 {
            resource.handle.load(Relaxed)
        }
    }

    impl<T: WasmResource> fmt::Debug for Resource<T> {
        fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
            f.debug_struct("Resource")
                .field("handle", &self.handle)
                .finish()
        }
    }

    impl<T: WasmResource> Drop for Resource<T> {
        fn drop(&mut self) {
            unsafe {
                match self.handle.load(Relaxed) {
                    // If this handle was "taken" then don't do anything in the
                    // destructor.
                    u32::MAX => {}

                    // ... but otherwise do actually destroy it with the imported
                    // component model intrinsic as defined through `T`.
                    other => T::drop(other),
                }
            }
        }
    }

    pub fn as_i32<T: AsI32>(t: T) -> i32 {
        t.as_i32()
    }

    pub trait AsI32 {
        fn as_i32(self) -> i32;
    }

    impl<'a, T: Copy + AsI32> AsI32 for &'a T {
        fn as_i32(self) -> i32 {
            (*self).as_i32()
        }
    }

    impl AsI32 for i32 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for u32 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for i16 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for u16 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for i8 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for u8 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for char {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for usize {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    pub use alloc_crate::vec::Vec;
    pub unsafe fn invalid_enum_discriminant<T>() -> T {
        if cfg!(debug_assertions) {
            panic!("invalid enum discriminant")
        } else {
            core::hint::unreachable_unchecked()
        }
    }

    pub fn as_i64<T: AsI64>(t: T) -> i64 {
        t.as_i64()
    }

    pub trait AsI64 {
        fn as_i64(self) -> i64;
    }

    impl<'a, T: Copy + AsI64> AsI64 for &'a T {
        fn as_i64(self) -> i64 {
            (*self).as_i64()
        }
    }

    impl AsI64 for i64 {
        #[inline]
        fn as_i64(self) -> i64 {
            self as i64
        }
    }

    impl AsI64 for u64 {
        #[inline]
        fn as_i64(self) -> i64 {
            self as i64
        }
    }
    pub use alloc_crate::alloc;
    pub unsafe fn cabi_dealloc(ptr: *mut u8, size: usize, align: usize) {
        if size == 0 {
            return;
        }
        let layout = alloc::Layout::from_size_align_unchecked(size, align);
        alloc::dealloc(ptr as *mut u8, layout);
    }
    extern crate alloc as alloc_crate;
}

#[cfg(target_arch = "wasm32")]
#[link_section = "component-type:wit-bindgen:0.21.0:bp-hal:encoded world"]
#[doc(hidden)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 865] = *b"\
\0asm\x0d\0\x01\0\0\x19\x16wit-component-encoding\x04\0\x07\xe4\x05\x01A\x02\x01\
A\x04\x01B\x07\x04\0\x05delay\x03\x01\x01i\0\x01@\0\0\x01\x04\0\x12[constructor]\
delay\x01\x02\x01h\0\x01@\x02\x04self\x03\x02nsy\x01\0\x04\0\x16[method]delay.de\
lay-ns\x01\x04\x03\x01\"wasm-robotics:robotics/delay@0.1.0\x05\0\x01B\x1e\x01{\x04\
\0\x07address\x03\0\0\x01m\x03\x07address\x04data\x07unknown\x04\0\x15no-acknowl\
edge-source\x03\0\x02\x01q\x06\x03bus\0\0\x10arbitration-loss\0\0\x0eno-acknowle\
dge\x01\x03\0\x07overrun\0\0\x05other\0\0\x09not-found\0\0\x04\0\x0aerror-code\x03\
\0\x04\x01p}\x01q\x02\x04read\x01w\0\x05write\x01\x06\0\x04\0\x09operation\x03\0\
\x07\x04\0\x03i2c\x03\x01\x01i\x09\x01@\x01\x0aidentifiers\0\x0a\x04\0\x10[const\
ructor]i2c\x01\x0b\x01h\x09\x01p\x08\x01p\x06\x01j\x01\x0e\x01\x05\x01@\x03\x04s\
elf\x0c\x07address\x01\x0aoperations\x0d\0\x0f\x04\0\x17[method]i2c.transaction\x01\
\x10\x01j\x01\x06\x01\x05\x01@\x03\x04self\x0c\x07address\x01\x03lenw\0\x11\x04\0\
\x10[method]i2c.read\x01\x12\x01j\0\x01\x05\x01@\x03\x04self\x0c\x07address\x01\x04\
data\x06\0\x13\x04\0\x11[method]i2c.write\x01\x14\x01@\x04\x04self\x0c\x07addres\
s\x01\x05write\x06\x08read-lenw\0\x11\x04\0\x16[method]i2c.write-read\x01\x15\x01\
j\x01\x0a\x01\x05\x01@\x01\x0aidentifiers\0\x16\x04\0\x09i2c-named\x01\x17\x03\x01\
\x20wasm-robotics:robotics/i2c@0.1.0\x05\x01\x04\x01#wasm-robotics:robotics/bp-h\
al@0.1.0\x04\0\x0b\x0c\x01\0\x06bp-hal\x03\0\0\0G\x09producers\x01\x0cprocessed-\
by\x02\x0dwit-component\x070.201.0\x10wit-bindgen-rust\x060.21.0";

#[inline(never)]
#[doc(hidden)]
#[cfg(target_arch = "wasm32")]
pub fn __link_custom_section_describing_imports() {
    wit_bindgen_rt::maybe_link_cabi_realloc();
}
